#Crear de un namespace
apiVersion: v1
kind: Namespace
metadata: 
  name: actividadcs-namespace 
---
#-----------------POSTGRESQL
# Volumen persistente 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-postgrescs-vol
  namespace: actividadcs-namespace  
spec: 
  storageClassName: postgres 
  capacity:
    storage: 10Gi # Capacidad
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/postgres-vol" # Lugar donde guardara los datos, dependiendo de cada manejador
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-postgrescs
  namespace: actividadcs-namespace
spec:
  storageClassName: postgres
  accessModes:
    - ReadWriteOnce
  resources: 
    requests:
      storage: 5Gi 
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: postgres
  namespace: actividadcs-namespace
provisioner: kubernetes.io/no-provisioner 
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer
---
#Configuramos el configMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-configmap 
  namespace: actividadcs-namespace
  labels:
    app: postgres-server 
data: #Agregaremos las variables de entorno
  POSTGRES_USER: root
  POSTGRES_PASSWORD: secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: actividadcs-namespace
  labels:
    app: postgres-server
spec:
  selector:
    matchLabels:
      app: postgres-server
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-server
    spec:
      containers:
      - image: postgres:11  #docker pull image
        name: postgres-db1
        ports:
        - containerPort: 5432 
          protocol: TCP  
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db-volume
        envFrom:
            - configMapRef:
                name: postgres-configmap
      volumes:
      - name: postgres-db-volume
        persistentVolumeClaim:
           claimName: pvc-postgrescs
---
#Crear servicio
apiVersion: v1
kind: Service
metadata: 
  name: service-postgres
  namespace: actividadcs-namespace
spec:
  selector:
    app: postgres-server 
  ports:
    - port: 5300 
      targetPort: 5432
  type: LoadBalancer
---
# ----------------------MYSQL

# Volumen persistente 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mysql-vol
  namespace: actividadcs-namespace  
spec: 
  storageClassName: mysql 
  capacity:
    storage: 10Gi # Capacidad
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/mysql-vol" 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mysql
  namespace: actividadcs-namespace
spec:
  storageClassName: mysql
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests:
      storage: 5Gi 
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mysql
  namespace: actividadcs-namespace
provisioner: kubernetes.io/no-provisioner 
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer
---
#Hacer ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
  namespace: actividadcs-namespace
  labels:
    app: mysql-server
data: #Agregaremos las variables de entorno
  MYSQL_ROOT_PASSWORD: secret 
---
#Hacer deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: actividadcs-namespace
  labels:
    app: mysql-server
spec:
  selector:
    matchLabels:
      app: mysql-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-server
    spec:
      containers:
      - image: mysql:8.0  #docker pull image
        name: mysql-db1
        ports:
        - containerPort: 3306
          protocol: TCP  
        volumeMounts:
        - mountPath: /var/lib/mysql #Debemos saber bien el mountpath
          name: mysql-db-volume
        envFrom:
            - configMapRef:
                name: mysql-configmap
      volumes:
      - name: mysql-db-volume
        persistentVolumeClaim:
           claimName: pvc-mysql
---
#Crear servicio
apiVersion: v1
kind: Service
metadata: 
  name: service-mysql
  namespace: actividadcs-namespace
spec:
  selector:
    app: mysql-server
  ports:
    - port: 5303
      targetPort: 3306
  type: LoadBalancer 
---
  # --------MONGO
# Volumen persistente 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mongo-vol
  namespace: actividadcs-namespace  
spec:
  storageClassName: mongo
  capacity:
    storage: 10Gi # Capacidad
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/mongo-vol" # Lugar donde guardara los datos, dependiendo de cada manejador
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mongo
  namespace: actividadcs-namespace
spec:
  storageClassName: mongo
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests:
      storage: 5Gi 
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mongo
  namespace: actividadcs-namespace
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-configmap
  namespace: actividadcs-namespace
  labels:
    app: mongo-server 
data: #Agregaremos las variables de entorno
  MONGO_USER: root
  MONGO_PASSWORD: secret  
---
#crear deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: actividadcs-namespace
  labels:
    app: mongo-server
spec:
  selector:
    matchLabels:
      app: mongo-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo-server
    spec:
      containers:
      - image: mongo:4.0.23  #docker pull image
        name: mongo-db1
        ports:
        - containerPort: 27017
          protocol: TCP  
        volumeMounts:
        - mountPath: /data/db
          name: mongo-db-volume
        envFrom:
            - configMapRef:
                name: mongo-configmap
      volumes:
      - name: mongo-db-volume
        persistentVolumeClaim:
           claimName: pvc-mongo
---
#Crear servicio
apiVersion: v1
kind: Service
metadata: 
  name: service-mongo
  namespace: actividadcs-namespace
spec:
  selector:
    app: mongo-server
  ports:
    - port: 5302
      targetPort: 27017 
  type: LoadBalancer
---
# -----------------REDIS
# Volumen persistente 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-redis-vol
  namespace: actividadcs-namespace  
spec:
  storageClassName: redis
  capacity:
    storage: 10Gi # Capacidad
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/redis-vol"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-redis
  namespace: actividadcs-namespace
spec:
  storageClassName: redis
  accessModes:
    - ReadWriteOnce
  resources: 
    requests:
      storage: 5Gi 
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: redis
  namespace: actividadcs-namespace
provisioner: kubernetes.io/no-provisioner 
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-configmap
  namespace: actividadcs-namespace
  labels:
    app: redis-server
data: #Agregaremos las variables de entorno
  REDIS_USER: root
  REDIS_PASSWORD: secret
---
#Hacer deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: actividadcs-namespace
  labels:
    app: redis-server
spec:
  selector:
    matchLabels:
      app: redis-server
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-server
    spec:
      containers:
      - image: redis:6.2.0  #docker pull image
        name: redis-db1
        ports:
        - containerPort: 6379
          protocol: TCP  
        volumeMounts:
        - mountPath: /redis-master-data
          name: redis-db-volume
        envFrom:
            - configMapRef:
                name: redis-configmap
      volumes:
      - name: redis-db-volume
        persistentVolumeClaim:
           claimName: pvc-redis
---
#Crear servicio
apiVersion: v1
kind: Service
metadata: 
  name: service-redis
  namespace: actividadcs-namespace
spec:
  selector:
    app: redis-server 
  ports:
    - port: 5301
      targetPort: 6379
  type: LoadBalancer 



